## 実行コマンドとローカルホストと終了コマンド
1:node app.js　
2:http://localhost:3002
3:リロードは面倒作業（終了して再リロード）またはnodemonの利用
ctrl+c
nodebrew use v14.2.0

## Githubコミット例： git commit -m "page67-69"

## 追跡しやすくデバッグしやすくするためのrule.txt
    // list2-1(p56)1106　（技術書のリストNo.、ページ数、更新日付を記入）
    // app.js (２行目はファイル名を記入)

## 違和感箇所を保存してデバッグしやすくするissue.txt

## リクエストとレスポンス
    1:http.ClientRequest
        -request引数に入っているcから送られてきた情報を管理するオブジェクト
    2:http.ServerResponse
        -response引数に入っているsから送り出される情報を管理するオブジェクト

## 基本設定３ステップ
    1：httpを用意するーモジュールがロードされて変数（定数）にオブジェクトとして設定=httpというモジュール名を用意
    const http = require('http');
    2：createServerメソッドでhttp.Serverオブジェクトを作成
    var server = http.createServer(
        // c要求→s, s返信→c アクセスされると実行される処理
        (request, response) => {
            // 返信する.終了する(テキスト部分を表示)
            response.end('Hello Node.js!');
        }
    );
    3：待ち受け開始
    server.listen(3000);

## ESJのインストール　npm install esj

## クッキーの利用p139（サーバーから送られた値を他人事にwebブラウザに保管する仕組み）
    -サーバーとの間で「ヘッダー情報（画面に表示されないコンテンツに関する情報）」としてやり取りをする
    -サーバーからヘッダー情報→クライアントに送る→webブラウザ側で保管
    -アクセスする時にクッキー情報をヘッダーに追加してサーバーへ送る→受け取ったサーバー側はクッキー情報を元に処理を行う
    の繰り返しをしているので、クッキー情報を利用するためにはヘッダー情報のやり取り設定が必要
    -ボディに属しているコンテンツ内容と、ヘッダーに属しているクッキーが追加されて？合体されて？サーバーとクライアントをやり取りしている。
    -クライアントで設定したクッキー情報がブラウザ内部に保管され、それが情報元となる。
    -クッキーは日本語を直接保管できず保管値の種類が限定されていて、使用時は特殊形式に変換する必要がある
    -作成は大変だが一旦作成してしまえば大変ではない
    　-index.ejsのbody, app.jsのcookie_dataにクッキーの値を入れるようにする
    　-クッキー情報はブラウザやデバイスに紐づいているので
        -同じPCで異なるアカウントで同じアプリにアクセスしてもクッキー情報は異なる
        -同じアカウントでもデバイスが異なればクッキー情報は異なる
        -より複雑な処理や大きなデータなどはクッキー以外のセッションという機能を利用する（Node.js標準仕様外のためフレームワーク利用で実装可能）