## 実行コマンドとローカルホストと終了コマンド
1:node app.js（nodemon導入前）　
2:http://localhost:3000
ctrl+c
nodebrew use v14.2.0

## リロード作業の効率化
nodemonの導入
1：package.json追加
2：npm install -g nodemon
3：npm install --save-dev nodemon
4：package.jsonのscriptsでnodemonで起動できるようにテキストを修正
    "scripts": {
        "dev": "nodemon app.js"
    },
5：npm run devで起動実行が可能になる（nodemon導入後）


// list2-10(p92)1108
// app.js

/* 
1: require
    モジュールがロードされて変数（定数）にオブジェクトとして設定=httpというモジュール名を用意
2: createServer
    メソッドでサーバーオブジェクトを作成
    -c要求→s, s返信→c アクセスされると実行される処理
    -返信する.終了する(内容を表示)
3: listen
    待ち受け開始
*/

const http = require('http');
const fs = require('fs');
const ejs = require('ejs');
// const path = require('path'); // Vercelデプロイ用
const url = require('url')

// ファイルから読み込む処理をバックグラウンドで実行する非同期処理、readFileメソッド
// const indexFilePath = path.join(__dirname, './index.ejs');
const index_page = fs.readFileSync('./index.ejs', 'utf-8');


var server = http.createServer(getFromClient);

server.listen(3002);
console.log('Server start!');

// ここまでメインプログラム========

// createServerの処理
function getFromClient(request, response) {
    var content = ejs.render(index_page, {
        title:"Indexページ",
        content:"これはテンプレートを使ったサンプルページです。",
    });
        response.writeHead(200, { 'Content-Type': 'text/html' });
        response.write(content);
        response.end();
}

// 11081620 nodev18.16.1 
// 11081641 nodev14.2.0

## list2-13(p100)1110:url.parseの非推奨警告あり。
ただ、下記修正へもcrashedが発生してしまうので、教科書通りのurl.parseで実行
const http = require('http');
const fs = require('fs');
const ejs = require('ejs');

var server = http.createServer(getFromClient);

server.listen(3000);
console.log('Server start!');

function getFromClient(request, response) {
    var urlObject = new URL(request.url, 'http://localhost:3000');

    switch (urlObject.pathname) {
        case '/':
            var content = ejs.render(index_page, {
                title: "Indexページ",
                content: "これはテンプレートを使ったサンプルページです。",
            });
            response.writeHead(200, { 'Content-Type': 'text/html' });
            response.write(content);
            response.end();
            break;

        case '/style.css':
            response.writeHead(200, { 'Content-Type': 'text/css' });
            response.write(style_css);
            response.end();
            break;

        default:
            response.writeHead(200, { 'Content-Type': 'text/plain' });
            response.write('no page...');
            response.end();
            break;
    }
}

### Vercelではサーバーレス仕様で稼働しているため、Node.jsやejs仕様ではデフォルトではindex.htmlを参照しに行くことになっている。
    サーバーレス関数として設定すると、Vercelでも使える可能性ありかも。  



